# This is a basic workflow to help you get started with Actions

name: Build and Release Hadoop Winutils

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      hadoop_version:
        description: 'Hadoop version to build (e.g., 3.3.4)'
        required: true
        default: '3.3.4'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
env:
  # Define versions needed for the build - Adjust these based on Hadoop's BUILDING.txt for the target version
  # For Hadoop 3.3.4:
  JAVA_VERSION: '11'          # Hadoop 3.3+ supports Java 8 and 11
  MAVEN_VERSION: '3.8.8'      # Use a recent Maven 3.x version
  PROTOBUF_VERSION: '3.7.1'   # Critical for Hadoop 3.3.x builds (upgraded from 2.5.0)
  TARGET_ARCH: 'x64'          # Build 64-bit binaries

jobs:
  build-winutils:
    runs-on: windows-latest # Essential: Needs a Windows runner with Visual Studio

    steps:
      - uses: actions/checkout@v4

      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: corretto

      - name: Install zlib development package
        run: vcpkg install zlib

      - name: Download and Setup Protocol Buffers
        run: vcpkg install protobuf
        
      - name: Checkout Hadoop Source via Git (${{ github.event.inputs.hadoop_version }})
        shell: pwsh
        run: |
          $HadoopVersion = "${{ github.event.inputs.hadoop_version }}"
          $HadoopSrcDir = "C:\hadoop-src" # Use a short path
          # Hadoop release tags are typically prefixed with 'rel/release-'
          $TagName = "rel/release-$HadoopVersion"
          $RepoUrl = "https://github.com/apache/hadoop.git" # Official read-only mirror

          Write-Host "Cloning Hadoop version $HadoopVersion (tag $TagName) from $RepoUrl"
          # Clone only the specific tag with minimal history (--depth 1)
          git clone --depth 1 --branch $TagName $RepoUrl $HadoopSrcDir
          Write-Host "Successfully cloned to $HadoopSrcDir"

          # Set HADOOP_SRC environment variable for later steps
          echo "HADOOP_SRC=${HadoopSrcDir}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "HADOOP_VERSION=${HadoopVersion}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append


      # 3. Build Hadoop Native Binaries
      # This step requires running Maven within the Visual Studio Developer Command Prompt environment
      - name: Find VS Developer Command Prompt
        id: vsdevcmd
        shell: pwsh
        run: |
          # Use vswhere to find the location of VsDevCmd.bat reliably
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $vsPath = (& $vswhere -latest -property installationPath)
          $vsDevCmd = Join-Path $vsPath "Common7\Tools\VsDevCmd.bat"
          if (-not (Test-Path $vsDevCmd)) {
            Write-Error "Could not find VsDevCmd.bat at $vsDevCmd"
            exit 1
          }
          echo "vs_dev_cmd_path=$vsDevCmd" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Build Hadoop with Maven (using VsDevCmd)
        shell: cmd # VsDevCmd.bat works best with cmd
        run: |
          set MAVEN_OPTS=-Xmx2g -Dmaven.artifact.threads=1
          set JAVA_HOME=${{ env.JAVA_HOME }}
          echo "Using JAVA_HOME: %JAVA_HOME%"
          echo "Using HADOOP_SRC: %HADOOP_SRC%"
          REM Initialize the Visual Studio environment
          call "${{ steps.vsdevcmd.outputs.vs_dev_cmd_path }}" -arch=${{ env.TARGET_ARCH }} -host_arch=${{ env.TARGET_ARCH }}

          REM Navigate to source directory and run Maven build
          cd %HADOOP_SRC%
          mvn package -Pdist,native-win -DskipTests -Dtar -Dmaven.javadoc.skip=true -Dmaven.source.skip=true -Dcheckstyle.skip=true --batch-mode --no-transfer-progress
